version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      kafka_network:
        aliases:
          - kafka

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic raw_data --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic processed_data --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic predictions --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - kafka_network

  kafka_exporter:
    image: danielqsj/kafka-exporter:latest
    environment:
      LOG_LEVEL: debug
    depends_on:
      - kafka
    networks:
      - kafka_network
    ports:
      - "9308:9308"

  torchserve:
    build:
      context: ./model_store
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
    volumes:
      - ./model_store:/home/model-server/model-store
    networks:
      - kafka_network

  web_backend:
    build:
      context: ./web/backend
    volumes:
      - ./web/backend:/app
    ports:
      - "5000:5000"
    networks:
      kafka_network:
        aliases:
          - web_backend
    depends_on:
      - kafka

  web_frontend:
    build:
      context: ./web/frontend
      args:
        - REACT_APP_BACKEND_URL=http://web_backend:5000
    volumes:
      - ./web/frontend:/app
    ports:
      - "3000:3000"
    networks:
      - kafka_network

  prometheus:
    image: prom/prometheus:v2.28.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kafka_network

  data_processing:
    build:
      context: ./data_processing
    volumes:
      - ./data_processing/model:/app/model
      - C:/capture:/mnt/capture
    environment:
      - KAFKA_BROKER=kafka:9092
      - CAPTURE_FILE=/mnt/capture/traffic.pcap
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge
